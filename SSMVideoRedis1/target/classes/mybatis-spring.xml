<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:redis="http://www.springframework.org/schema/redis"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis-1.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	
	<!--spring 扫包   @Service .....-->
	<context:component-scan base-package="cm.duu">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 引入数据库配置文件 -->
<bean id="propertyConfigurer"    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
        <list>
            <value>classpath:db.properties</value>
            <value>classpath:redis.properties</value>
        </list>
    </property>
    
 
    
</bean>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${dbcp.driverClassName}"></property>
		<property name="url" value="${dbcp.url}"></property>
		<property name="username" value="${dbcp.username}"></property>
		<property name="password" value="${dbcp.password}"></property>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:daomapper/*.xml"></property>
		<property name="typeAliases" value="cm.duu.entity.Movie"></property>

	</bean>
	<!-- redis数据源 -->
<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
    <property name="maxIdle" value="${redis.maxIdle}" />  
    <property name="maxTotal" value="${redis.maxActive}" />  
    <property name="maxWaitMillis" value="${redis.maxWait}" />  
    <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
</bean>

<!-- redis连接池 -->
                <bean  class="redis.clients.jedis.JedisPool" destroy-method="close">
                    <constructor-arg name="poolConfig" ref="poolConfig"/>
                    <constructor-arg name="host" value="${redis.host}"/>
                    <constructor-arg name="port" value="${redis.port}"/>
                </bean>
<!-- Spring-redis连接池管理工厂 -->
     <bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
                   <property name="hostName" value="${redis.host}"></property>
                   <property name="port" value="${redis.port}"></property>
                   <property name="password" value="${redis.pass}"></property>
                   <property name="poolConfig" ref="poolConfig"></property>
                </bean>      
              
	<bean id="t" class="cm.duu.aop.T">
	</bean> 
	<!-- Spring  Aop 配置   get* 配置环绕 -->
	<aop:config>
		<!-- 面 -->
		<aop:aspect ref="t">
			<!-- 点 -->
			<aop:around method="doAround"  pointcut="execution(* cm.duu.service.*.query*(..))"/> 
		
		</aop:aspect>
	</aop:config>
	
        
                    
<!-- 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
<!-- <bean id="redisCacheTransfer" class="com.strive.cms.cache.RedisCacheTransfer">
    <property name="jedisConnectionFactory" ref="jedisConnectionFactory"/>
</bean> -->
	
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    		<property name="basePackage" value="cm.duu.dao" />
      </bean>

    <!-- spring 事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 开启事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
</beans>
